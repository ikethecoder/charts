apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.openldapha.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      initContainers:
      - name: init-openldap
        image: {{ .Values.openldapImage }}
        env:
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: admin-password
        - name: CONFIG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: config-password
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: replication-password
        command:
          - bash
          - "-c"
          - |
            set -ex
            # Generate openldap server-id from pod ordinal index.
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            # Copy server-id.conf adding offset to avoid reserved server-id=0 value.
            #cat /mnt/config-map/server-id.cnf | sed s/@@SERVER_ID@@/$((100 + $ordinal))/g > /mnt/conf.d/server-id.cnf
            # Copy appropriate conf.d files from config-map to config mount.
            #if [[ $ordinal -eq 0 ]]; then
            #  cp /mnt/config-map/master.cnf /mnt/conf.d/
            #else
            #  cp /mnt/config-map/slave.cnf /mnt/conf.d/
            #fi
            # Copy replication user script
            if [[ $ordinal -eq 0 ]]; then
              cp /mnt/config-map/create-replication-user.sql /mnt/scripts/create-replication-user.sql
            fi

            cat /mnt/config-map/default.startup.yaml | sed s/@@CONFIG_PASSWORD@@/${CONFIG_PASSWORD}/g | sed s/@@ADMIN_PASSWORD@@/${ADMIN_PASSWORD}/g > /mnt/environment/default.startup.yaml

            cat /mnt/environment/default.startup.yaml
 
            # Copy the default startup config to config folder
            #cp /mnt/config-map/default.startup.yaml /mnt/environment
            cp /mnt/config-map/default.yaml /mnt/environment

            # /container/environment/99-default
            printenv


        volumeMounts:
          - name: environment
            mountPath: /mnt/environment
          - name: conf
            mountPath: /mnt/conf.d
          - name: config-map
            mountPath: /mnt/config-map
          - name: scripts
            mountPath: /mnt/scripts
      containers:
      - name: openldap 
        image: {{ .Values.openldapImage }}
        env:
        - name: CONTAINER_LOG_LEVEL
          value: "5"
        - name: BASE_DN
          value: {{ .Values.openldapha.baseDN }}
        - name: ADMIN_DN
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: admin-dn
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: admin-password
        - name: REPLICATION_USER
          value: {{ .Values.openldapha.replicationUser }}
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: replication-password
        {{ if .Values.openldapha.openldapUser }}
        - name: OPENLDAP_USER
          value: {{ .Values.openldapha.openldapUser | quote }}
        - name: OPENLDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: openldap-password
        {{ end }}
        ports:
        - name: openldap
          containerPort: 389
        volumeMounts:
        - name: conf 
          mountPath: /container/run/state
          subPath: state
        - name: environment
          mountPath: /container/environment/99-default
        - name: data
          mountPath: /var/lib/ldap
        - name: conf
          mountPath: /etc/ldap/slapd.d
          subPath: ldap
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - "-c"
            - ldapsearch -x -H "ldap://localhost" -D ${ADMIN_DN} -w ${ADMIN_PASSWORD} -b ${BASE_DN}
          initialDelaySeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command:
            - /bin/sh
            - "-c"
            - ldapsearch -x -H "ldap://localhost" -D ${ADMIN_DN} -w ${ADMIN_PASSWORD} -b ${BASE_DN}
          initialDelaySeconds: 10
          timeoutSeconds: 1

      volumes:
      - name: environment
        emptyDir: {}
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: {{ template "fullname" . }}
      - name: scripts
        emptyDir: {}
      {{- if eq .Values.persistence.enabled false }}
      - name: data
        emptyDir: {}
      {{- end}}

  volumeClaimTemplates:
  {{- if .Values.persistence.enabled }}
  - metadata:
      name: data
      annotations:
        {{- if .Values.persistence.storageClass }}
        volume.alpha.kubernetes.io/storage-class: {{ .Values.persistence.storageClass }}
        {{- end }}
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
  - metadata:
      name: conf
      annotations:
        {{- if .Values.persistence.storageClass }}
        volume.alpha.kubernetes.io/storage-class: {{ .Values.persistence.storageClass }}
        {{- end }}
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode | quote }}
      resources:
        requests:
          storage: 1Gi
  {{- end }}
